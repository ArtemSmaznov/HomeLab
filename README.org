#+title:       Server
#+author:      Artem Smaznov
#+description: Docker setup for my server
#+startup:     overview
#+property:    header-args :tangle docker-compose.yml
#+auto_tangle: t

* Table of Contents :toc:
- [[#usage][Usage]]
- [[#version][Version]]
- [[#networks][Networks]]
- [[#secrets][Secrets]]
- [[#services][Services]]
  - [[#reverse-proxy][Reverse Proxy]]
  - [[#pi-hole][Pi-Hole]]
  - [[#home][Home]]
  - [[#vpn][VPN]]
  - [[#transmission][Transmission]]
  - [[#nextcloud][Nextcloud]]
  - [[#home-assistant][Home Assistant]]
  - [[#grafana][Grafana]]
  - [[#plex][Plex]]
  - [[#anki][Anki]]
  - [[#archi-steam-farm][Archi Steam Farm]]
  - [[#web-trees][Web Trees]]

* Usage
Bring server up
#+begin_example shell
docker-compose up -d
#+end_example

Bring server down
#+begin_example shell
docker-compose down
#+end_example

Update images
#+begin_example shell
docker-compose build --pull
#+end_example

* Version
#+begin_src yaml
version: '3'
#+end_src

* Networks
#+begin_src yaml
networks:
  proxy-tier:
    ipam:
      config:
        - subnet: 172.10.0.0/24
  hass:
    ipam:
      config:
        - subnet: 172.11.0.0/24
  nextcloud:
  vpn:
  grafana:
  webtrees:
#+end_src

* Secrets
#+begin_src yaml
secrets:
  pihole_password:
    file: secrets/pihole_password
  db_password:
    file: secrets/db_password
  db_root_password:
    file: secrets/db_root_password
  webtrees_password:
    file: secrets/webtrees/password
  webtrees_db_password:
    file: secrets/webtrees/db_password
  webtrees_db_root_password:
    file: secrets/webtrees/db_root_password
  transmission_password:
    file: secrets/transmission_password
#+end_src

* Services
#+begin_src yaml
services:
#+end_src
** Reverse Proxy
*** Proxy
#+begin_src yaml
  proxy:
    build: ./proxy
    container_name: reverse-proxy
    tty: true # enable colorized logs
    restart: always
    ports:
      - 80:80
      - 443:443
    volumes:
      - /bigdiskx/proxy/certs:/etc/nginx/certs:ro
      - /bigdiskx/proxy/vhost.d:/etc/nginx/vhost.d
      - /bigdiskx/proxy/html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: 'true'
    networks:
      - proxy-tier
#+end_src

*** Let's Encrypt Companion
#+begin_src yaml
  acme:
    image: nginxproxy/acme-companion
    container_name: acme
    tty: true # enable colorized logs
    restart: always
    depends_on:
      - proxy
    volumes:
      - /bigdiskx/proxy/certs:/etc/nginx/certs
      - /bigdiskx/proxy/acme:/etc/acme.sh
      - /bigdiskx/proxy/vhost.d:/etc/nginx/vhost.d
      - /bigdiskx/proxy/html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=${MY_EMAIL}
    networks:
      - proxy-tier
#+end_src

** Pi-Hole
#+begin_src yaml
  pi-hole:
    image: pihole/pihole:latest
    container_name: pi-hole
    hostname: pi-hole
    tty: true # enable colorized logs
    restart: always
    ports:
      - 53:53/tcp
      - 53:53/udp
      - 67:67/udp
    cap_add:
      - NET_ADMIN
    volumes:
      - /bigdiskx/pi-hole/etc:/etc/pihole
      - /bigdiskx/pi-hole/dnsmasq.d:/etc/dnsmasq.d
    environment:
      - VIRTUAL_HOST=${PIHOLE_HOST}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=${PIHOLE_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
      - FTLCONF_LOCAL_IPV4=${MY_SERVER_IP}
      - WEBPASSWORD_FILE=/run/secrets/pihole_password
      - PROXY_LOCATION=pi-hole
      - TZ=${TIME_ZONE}
    extra_hosts:
      # Resolve to nothing domains (terminate connection)
      - 'nw2master.bioware.com nwn2.master.gamespy.com:0.0.0.0'
      # LAN hostnames for other docker containers using nginx-proxy
      - ${HOST_1}
      - ${HOST_2}
      - ${HOST_3}
      - ${HOST_4}
      - ${HOST_5}
      - ${HOST_6}
      - ${HOST_7}
      - ${HOST_8}
      - 'pi-hole pi-hole.${MY_DOMAIN}:${MY_SERVER_IP}'
    secrets:
      - pihole_password
    networks:
      - proxy-tier
      - hass
#+end_src

** Home
#+begin_src yaml
  home:
    image: linuxserver/heimdall:latest
    container_name: home
    tty: true # enable colorized logs
    restart: unless-stopped
    volumes:
      - /bigdiskx/heimdall:/config
    environment:
      - VIRTUAL_HOST=${HOME_HOST}
      - VIRTUAL_PORT=443
      - VIRTUAL_PROTO=https
      - LETSENCRYPT_HOST=${HOME_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    networks:
      - proxy-tier
#+end_src

** VPN
*** WireGuard
#+begin_src yaml
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard
    tty: true # enable colorized logs
    restart: unless-stopped
    ports:
      - ${WIREGUARD_PORT}:${WIREGUARD_PORT}/udp
      # wireguard-ui
      - ${WIREGUARD_UI_LOCAL_PORT}:5000
      # transmission
      #- ${TRANSMISSION_WEBUI_PORT}:${TRANSMISSION_WEBUI_PORT}/tcp
      #- ${TRANSMISSION_PEER_PORT}:${TRANSMISSION_PEER_PORT}
      #- ${TRANSMISSION_PEER_PORT}:${TRANSMISSION_PEER_PORT}/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
      - net.ipv6.conf.all.disable_ipv6=1
      - net.ipv6.conf.default.disable_ipv6=1
    cap_add:
      - NET_ADMIN
    volumes:
      - /bigdiskx/wireguard:/config
      - /lib/modules:/lib/modules
    environment:
      #- VIRTUAL_HOST=${TRANSMISSION_HOST}
      #- VIRTUAL_PORT=${TRANSMISSION_WEBUI_PORT}
      #- LETSENCRYPT_HOST=${TRANSMISSION_HOST}
      #- LETSENCRYPT_EMAIL=${MY_EMAIL}
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
      - SERVERPORT=${WIREGUARD_PORT}
      # - INTERNAL_SUBNET=10.13.13.0 #optional
      - ALLOWEDIPS=0.0.0.0/0 #optional
    networks:
      - proxy-tier
      - hass
      # - vpn
#+end_src

*** WireGuard UI
#+begin_src yaml
  wireguard-ui:
    image: ngoduykhanh/wireguard-ui:latest
    container_name: wireguard-ui
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - wireguard
    cap_add:
      - NET_ADMIN
    volumes:
      - /bigdiskx/wireguard:/etc/wireguard
    environment:
      - SENDGRID_API_KEY
      - EMAIL_FROM_ADDRESS
      - EMAIL_FROM_NAME
      - SESSION_SECRET
      - WGUI_USERNAME=${MY_USERNAME}
      - WG_CONF_TEMPLATE
      - WGUI_MANAGE_START=true
      - WGUI_MANAGE_RESTART=true
    env_file:
      - secrets/wireguard-ui.env
    logging:
      driver: json-file
      options:
        max-size: 50m
    network_mode: service:wireguard
#+end_src

** Transmission
Still needs work on opening the peer port
#+begin_src yaml
  transmission:
    image: linuxserver/transmission:latest
    container_name: transmission
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - wireguard
    ports:
      - ${TRANSMISSION_WEBUI_PORT}:${TRANSMISSION_WEBUI_PORT}/tcp
      - ${TRANSMISSION_PEER_PORT}:${TRANSMISSION_PEER_PORT}
      - ${TRANSMISSION_PEER_PORT}:${TRANSMISSION_PEER_PORT}/udp
    volumes:
      - /bigdiskx/transmission/config:/config
      - /bigdiskx/transmission/watch:/watch
      - /bigdiskx/transmission/downloads:/downloads
      - /bigdiskx/media:/downloads/media
    environment:
      - VIRTUAL_HOST=${TRANSMISSION_HOST}
      - VIRTUAL_PORT=${TRANSMISSION_WEBUI_PORT}
      - LETSENCRYPT_HOST=${TRANSMISSION_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
      - WEBUI_PORT=${TRANSMISSION_WEBUI_PORT}
      - PEERPORT=${TRANSMISSION_PEER_PORT}
      - USER=${MY_USERNAME}
      - FILE__PASS=/run/secrets/transmission_password
      - PUID=${UID}
      - PGID=${GID}
      - TZ=${TIME_ZONE}
    secrets:
      - transmission_password
    networks:
      - proxy-tier
      - hass
    #network_mode: service:wireguard
#+end_src

** Nextcloud
*** App
#+begin_src yaml
  nextcloud-app:
    build: ./nextcloud/app
    container_name: nextcloud-app
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    volumes:
      - /bigdiskx/nextcloud/app:/var/www/html
      - /bigdiskx/media/music:/var/www/html/data/artem/files/music
      - type: tmpfs
        target: /tmp:exec
    environment:
      - PUID=${UID}
      - PGID=${UID}
      - MYSQL_HOST=nextcloud-db
      - REDIS_HOST=nextcloud-redis
      - MYSQL_DATABASE=${NEXTCLOUD_DB_NAME}
      - MYSQL_USER=${NEXTCLOUD_DB_USER}
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
      - PHP_MEMORY_LIMIT=2048M
    secrets:
      - db_password
    networks:
      - nextcloud
#+end_src

*** Server
#+begin_src yaml
  nextcloud-server:
    build: ./nextcloud/server
    container_name: nextcloud-server
    hostname: nextcloud
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - nextcloud-app
    ports:
      - ${NEXTCLOUD_LOCAL_PORT}:80
    volumes:
      - /bigdiskx/nextcloud/app:/var/www/html:ro
    environment:
      - VIRTUAL_HOST=${NEXTCLOUD_HOST}
      - VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=${NEXTCLOUD_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
    networks:
      - proxy-tier
      - nextcloud
      - hass
#+end_src

*** Cron
#+begin_src yaml
  nextcloud-cron:
    image: nextcloud:fpm-alpine
    entrypoint: /cron.sh
    container_name: nextcloud-cron
    tty: true # enable colorized logs
    depends_on:
      - nextcloud-db
      - nextcloud-redis
    restart: unless-stopped
    volumes:
      - /bigdiskx/nextcloud/app:/var/www/html
      - /bigdiskx/nextcloud/cron:/var/spool/cron/crontabs
    networks:
      - nextcloud
#+end_src

*** Database
#+begin_src yaml
  nextcloud-db:
    image: mariadb
    container_name: nextcloud-db
    tty: true # enable colorized logs
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - /bigdiskx/nextcloud/db:/var/lib/mysql
    environment:
      - MARIADB_AUTO_UPGRADE=1
      - MARIADB_DISABLE_UPGRADE_BACKUP=1
      - MYSQL_DATABASE=${NEXTCLOUD_DB_NAME}
      - MYSQL_USER=${NEXTCLOUD_DB_USER}
      - MYSQL_PASSWORD_FILE=/run/secrets/db_password
      - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db_root_password
    secrets:
      - db_password
      - db_root_password
    networks:
      - nextcloud
#+end_src

*** Redis
#+begin_src yaml
  nextcloud-redis:
    image: redis:alpine
    container_name: nextcloud-redis
    tty: true # enable colorized logs
    restart: unless-stopped
    networks:
      - nextcloud
#+end_src

** Home Assistant
*** App
#+begin_src yaml
  hass:
    image: ghcr.io/home-assistant/home-assistant:stable
    container_name: home-assistant
    tty: true # enable colorized logs
    privileged: true
    depends_on:
      - grafana-influxdb
    restart: unless-stopped
    ports:
      - ${HOME_ASSISTANT_LOCAL_PORT}:8123
    volumes:
      - /bigdiskx/home-assistant/config:/config
      - /etc/localtime:/etc/localtime:ro
    environment:
      - VIRTUAL_HOST=${HOME_ASSISTANT_HOST}
      - VIRTUAL_PORT=8123
      - LETSENCRYPT_HOST=${HOME_ASSISTANT_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
    networks:
      - proxy-tier
      - hass
#+end_src

*** Z-Wave JS UI
#+begin_src yaml
  zwave-js-ui:
    image: zwavejs/zwave-js-ui:latest
    container_name: zwave-js-ui
    tty: true # enable colorized logs
    restart: unless-stopped
    stop_signal: SIGINT
    depends_on:
      - hass
    ports:
      - ${ZWAVE_JS_LOCAL_PORT}:3000 # port for Z-Wave JS websocket server
    volumes:
      - /bigdiskx/home-assistant/zwave:/usr/src/app/store
    devices:
      - /dev/serial/by-id/usb-0658_0200-if00:/dev/zwave
    environment:
      - VIRTUAL_HOST=${ZWAVE_JS_HOST}
      - VIRTUAL_PORT=8091
      - LETSENCRYPT_HOST=${ZWAVE_JS_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
      - ZWAVEJS_EXTERNAL_CONFIG=/usr/src/app/store/.config-db
      - TZ=${TIME_ZONE}
    env_file:
      - secrets/zwave-js-ui.env
    networks:
      - hass
      - proxy-tier
#+end_src

*** Wyoming Piper
#+begin_src yaml
  piper:
    image: rhasspy/wyoming-piper
    container_name: piper
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - hass
    ports:
      - 10200:10200
    volumes:
      - /bigdiskx/home-assistant/wyoming-piper:/data
    command: --voice=en_US-lessac-medium
    networks:
      - hass
#+end_src

*** Wyoming Whisper
#+begin_src yaml
  whisper:
    image: rhasspy/wyoming-whisper
    container_name: whisper
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - hass
    ports:
      - 10300:10300
    volumes:
      - /bigdiskx/home-assistant/wyoming-whisper:/data
    command: --model=small --language=en
    networks:
      - hass
#+end_src

*** Wyoming Open Wake Word
#+begin_src yaml
  openwakeword:
    image: rhasspy/wyoming-openwakeword
    container_name: openwakeword
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - hass
    ports:
      - 10400:10400
    command: --preload-model=ok_nabu
    networks:
      - hass
#+end_src

** Grafana
*** App
#+begin_src yaml
  grafana:
    image: grafana/grafana-oss
    container_name: grafana
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - grafana-influxdb
    user: '${UID}'
    ports:
      - ${GRAFANA_LOCAL_PORT}:3000
    volumes:
      - /bigdiskx/grafana/app:/var/lib/grafana
    networks:
      - grafana
      - hass
#+end_src

*** Influx DB
#+begin_src yaml
  grafana-influxdb:
    image: influxdb:latest
    container_name: grafana-influxdb
    tty: true # enable colorized logs
    restart: unless-stopped
    ports:
      - ${INFLUXDB_LOCAL_PORT}:8086
    volumes:
      - /bigdiskx/grafana/influxdb:/var/lib/influxdb2
    networks:
      - grafana
      - hass
#+end_src

** Plex
#+begin_src yaml
  plex:
    image: plexinc/pms-docker
    container_name: plex-media-server
    hostname: plex-media-server
    tty: true # enable colorized logs
    restart: unless-stopped
    ports:
      - ${PLEX_LOCAL_PORT}:32400/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32413:32413/udp
      - 32414:32414/udp
    volumes:
      - /bigdiskx/plex/config:/config
      - /bigdiskx/plex/transcode:/transcode
      - /bigdiskx/media:/data
    environment:
      - VIRTUAL_HOST=${PLEX_HOST}
      - VIRTUAL_PORT=32400
      - LETSENCRYPT_HOST=${PLEX_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
      - PLEX_CLAIM=
      - PLEX_UID=${UID}
      - PLEX_GID=${GID}
      - TZ=${TIME_ZONE}
    networks:
      - proxy-tier
      - hass
#+end_src

** Anki
#+begin_src yaml
  anki:
    image: kuklinistvan/anki-sync-server:latest
    container_name: anki
    tty: true # enable colorized logs
    restart: unless-stopped
    volumes:
      - /bigdiskx/anki:/app/data
    environment:
      - VIRTUAL_HOST=${ANKI_HOST}
      - VIRTUAL_PORT=27701
      - LETSENCRYPT_HOST=${ANKI_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
    networks:
      - proxy-tier
#+end_src

** Archi Steam Farm
#+begin_src yaml
  asf:
    image: justarchi/archisteamfarm
    container_name: asf
    tty: true # enable colorized logs
    restart: unless-stopped
    volumes:
      - /bigdiskx/archi-steam-farm:/app/config
    environment:
      - VIRTUAL_HOST=${ASF_HOST}
      - VIRTUAL_PORT=1242
      - LETSENCRYPT_HOST=${ASF_HOST}
      - LETSENCRYPT_EMAIL=${MY_EMAIL}
    networks:
      - proxy-tier
#+end_src

** Web Trees
*** App
#+begin_src yaml
  webtrees:
    image: nathanvaughn/webtrees
    container_name: webtrees
    tty: true # enable colorized logs
    restart: unless-stopped
    depends_on:
      - webtrees-db
    volumes:
      - /bigdiskx/webtrees/data:/var/www/webtrees/data
      - /bigdiskx/webtrees/themes:/var/www/webtrees/modules_v4
    environment:
      # proxy
      VIRTUAL_HOST: ${WEBTREES_HOST}
      VIRTUAL_PORT: 80
      LETSENCRYPT_HOST: ${WEBTREES_HOST}
      LETSENCRYPT_EMAIL: ${MY_EMAIL}
      # app
      PRETTY_URLS: true
      HTTPS: false
      HTTPS_REDIRECT: false
      LANG: en-US
      LOGIN_URL: "https://${WEBTREES_HOST}"
      SERVER_URL: "https://${WEBTREES_HOST}"
      BASE_URL: "https://${WEBTREES_HOST}"
      DB_TYPE: mysql
      DB_HOST: webtrees-db
      DB_PORT: 3306
      DB_NAME: ${WEBTREES_DB_NAME}
      DB_USER: ${WEBTREES_DB_USER}
      DB_PASS_FILE_FILE: /run/secrets/webtrees_db_password
      DB_PREFIX: wt_
      WT_NAME: ${MY_FULLNAME}
      WT_EMAIL: ${MY_EMAIL}
      WT_USER: ${MY_USERNAME}
      WT_PASS_FILE: /run/secrets/webtrees_password
    secrets:
      - webtrees_password
      - webtrees_db_password
    networks:
      - proxy-tier
      - webtrees
#+end_src

*** Database
#+begin_src yaml
  webtrees-db:
    image: mariadb
    container_name: webtrees-db
    tty: true # enable colorized logs
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --log-bin=binlog --binlog-format=ROW
    volumes:
      - /bigdiskx/webtrees/db:/var/lib/mysql
    environment:
      - MARIADB_AUTO_UPGRADE=1
      - MARIADB_DISABLE_UPGRADE_BACKUP=1
      - MARIADB_DATABASE=${WEBTREES_DB_NAME}
      - MARIADB_USER=${WEBTREES_DB_USER}
      - MARIADB_PASSWORD_FILE=/run/secrets/webtrees_db_password
      - MARIADB_ROOT_PASSWORD_FILE=/run/secrets/webtrees_db_root_password
    secrets:
      - webtrees_db_password
      - webtrees_db_root_password
    networks:
      - webtrees
#+end_src

